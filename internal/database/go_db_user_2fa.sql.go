// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: go_db_user_2fa.sql

package database

import (
	"context"
	"database/sql"
)

const addOrUpdateEmail = `-- name: AddOrUpdateEmail :exec
INSERT INTO go_db_user_2fa (user_id, email, is_active) 
VALUES (?, ?, TRUE)
ON DUPLICATE KEY UPDATE email = ?, edit_date = NOW()
`

type AddOrUpdateEmailParams struct {
	UserID  uint32
	Email   sql.NullString
	Email_2 sql.NullString
}

func (q *Queries) AddOrUpdateEmail(ctx context.Context, arg AddOrUpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, addOrUpdateEmail, arg.UserID, arg.Email, arg.Email_2)
	return err
}

const addOrUpdatePhone = `-- name: AddOrUpdatePhone :exec
INSERT INTO go_db_user_2fa (user_id, phone, is_active) 
VALUES (?, ?, TRUE)
ON DUPLICATE KEY UPDATE phone = ?, edit_date = NOW()
`

type AddOrUpdatePhoneParams struct {
	UserID  uint32
	Phone   sql.NullString
	Phone_2 sql.NullString
}

func (q *Queries) AddOrUpdatePhone(ctx context.Context, arg AddOrUpdatePhoneParams) error {
	_, err := q.db.ExecContext(ctx, addOrUpdatePhone, arg.UserID, arg.Phone, arg.Phone_2)
	return err
}

const countActive2FAMethods = `-- name: CountActive2FAMethods :one
SELECT COUNT(*) FROM go_db_user_2fa
WHERE user_id = ? AND is_active = TRUE
`

func (q *Queries) CountActive2FAMethods(ctx context.Context, userID uint32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActive2FAMethods, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const disable2FA = `-- name: Disable2FA :exec
UPDATE go_db_user_2fa SET is_active = FALSE, edit_date = NOW() 
WHERE user_id = ? AND type = ?
`

type Disable2FAParams struct {
	UserID uint32
	Type   GoDbUser2faType
}

func (q *Queries) Disable2FA(ctx context.Context, arg Disable2FAParams) error {
	_, err := q.db.ExecContext(ctx, disable2FA, arg.UserID, arg.Type)
	return err
}

const enable2FAEmail = `-- name: Enable2FAEmail :exec
INSERT INTO go_db_user_2fa (user_id, type, email, secret, is_active, create_date, edit_date) 
VALUES (?, ?, ?, "SECRET", FALSE, NOW(), NOW())
`

type Enable2FAEmailParams struct {
	UserID uint32
	Type   GoDbUser2faType
	Email  sql.NullString
}

func (q *Queries) Enable2FAEmail(ctx context.Context, arg Enable2FAEmailParams) error {
	_, err := q.db.ExecContext(ctx, enable2FAEmail, arg.UserID, arg.Type, arg.Email)
	return err
}

const get2FAById = `-- name: Get2FAById :one
SELECT id, user_id, type, secret, phone, email, is_active, create_date, edit_date FROM go_db_user_2fa WHERE id = ?
`

func (q *Queries) Get2FAById(ctx context.Context, id uint32) (GoDbUser2fa, error) {
	row := q.db.QueryRowContext(ctx, get2FAById, id)
	var i GoDbUser2fa
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Secret,
		&i.Phone,
		&i.Email,
		&i.IsActive,
		&i.CreateDate,
		&i.EditDate,
	)
	return i, err
}

const get2FAByUserAndType = `-- name: Get2FAByUserAndType :one
SELECT id, user_id, type, secret, phone, email, is_active, create_date, edit_date FROM go_db_user_2fa WHERE user_id = ? AND type = ?
`

type Get2FAByUserAndTypeParams struct {
	UserID uint32
	Type   GoDbUser2faType
}

func (q *Queries) Get2FAByUserAndType(ctx context.Context, arg Get2FAByUserAndTypeParams) (GoDbUser2fa, error) {
	row := q.db.QueryRowContext(ctx, get2FAByUserAndType, arg.UserID, arg.Type)
	var i GoDbUser2fa
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Secret,
		&i.Phone,
		&i.Email,
		&i.IsActive,
		&i.CreateDate,
		&i.EditDate,
	)
	return i, err
}

const get2FAStatus = `-- name: Get2FAStatus :one
SELECT is_active FROM go_db_user_2fa
WHERE user_id = ? AND type = ?
`

type Get2FAStatusParams struct {
	UserID uint32
	Type   GoDbUser2faType
}

func (q *Queries) Get2FAStatus(ctx context.Context, arg Get2FAStatusParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, get2FAStatus, arg.UserID, arg.Type)
	var is_active bool
	err := row.Scan(&is_active)
	return is_active, err
}

const getUser2FAMethods = `-- name: GetUser2FAMethods :many
SELECT id, user_id, type, secret, phone, email, is_active, create_date, edit_date FROM go_db_user_2fa
WHERE user_id = ?
`

func (q *Queries) GetUser2FAMethods(ctx context.Context, userID uint32) ([]GoDbUser2fa, error) {
	rows, err := q.db.QueryContext(ctx, getUser2FAMethods, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoDbUser2fa
	for rows.Next() {
		var i GoDbUser2fa
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Secret,
			&i.Phone,
			&i.Email,
			&i.IsActive,
			&i.CreateDate,
			&i.EditDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const is2FAEnabled = `-- name: Is2FAEnabled :one
SELECT COUNT(*) FROM go_db_user_2fa
WHERE user_id = ? AND is_active = TRUE
`

func (q *Queries) Is2FAEnabled(ctx context.Context, userID uint32) (int64, error) {
	row := q.db.QueryRowContext(ctx, is2FAEnabled, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const reactivate2FA = `-- name: Reactivate2FA :exec
UPDATE go_db_user_2fa SET is_active = TRUE, edit_date = NOW() 
WHERE user_id = ? AND type = ?
`

type Reactivate2FAParams struct {
	UserID uint32
	Type   GoDbUser2faType
}

func (q *Queries) Reactivate2FA(ctx context.Context, arg Reactivate2FAParams) error {
	_, err := q.db.ExecContext(ctx, reactivate2FA, arg.UserID, arg.Type)
	return err
}

const remove2FA = `-- name: Remove2FA :exec
DELETE FROM go_db_user_2fa
WHERE user_id = ? AND type = ?
`

type Remove2FAParams struct {
	UserID uint32
	Type   GoDbUser2faType
}

func (q *Queries) Remove2FA(ctx context.Context, arg Remove2FAParams) error {
	_, err := q.db.ExecContext(ctx, remove2FA, arg.UserID, arg.Type)
	return err
}

const update2FAStatus = `-- name: Update2FAStatus :exec
UPDATE go_db_user_2fa SET is_active = TRUE, edit_date = NOW() 
WHERE user_id = ? AND type = ? AND is_active = FALSE
`

type Update2FAStatusParams struct {
	UserID uint32
	Type   GoDbUser2faType
}

func (q *Queries) Update2FAStatus(ctx context.Context, arg Update2FAStatusParams) error {
	_, err := q.db.ExecContext(ctx, update2FAStatus, arg.UserID, arg.Type)
	return err
}

const verify2FA = `-- name: Verify2FA :one
SELECT COUNT(*) FROM go_db_user_2fa
WHERE user_id = ? AND type = ? AND is_active = TRUE
`

type Verify2FAParams struct {
	UserID uint32
	Type   GoDbUser2faType
}

func (q *Queries) Verify2FA(ctx context.Context, arg Verify2FAParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, verify2FA, arg.UserID, arg.Type)
	var count int64
	err := row.Scan(&count)
	return count, err
}
